








.386
.model flat, stdcall
option casemap : none

include windows.inc
include gdi32.inc
includelib gdi32.lib
include user32.inc
includelib user32.lib
include kernel32.inc
includelib kernel32.lib
include	msvcrt.inc
includelib msvcrt.lib

printf PROTO C : dword, : vararg
scanf  PROTO C : dword, : vararg
strlen PROTO C : dword

.DATA
;获取两个字符的长度
One_Length  dd 0
Two_Length  dd 0

szMsgError byte "错误输入或者数字过大", 0ah, 0
Msgscanf byte "%s", 0
szOutput byte "%d", 0
szOutputNumber byte "%c", 0
szOutputString byte "%s", 0
szMsgprint1 byte "第一个整数为：", 0ah, 0
szMsgprint2 byte "第二个整数为：", 0ah, 0
szMsgprint3 byte "最后的答案为：", 0ah, 0
sign dword 1; 正负号标志，1表示正数， - 1表示负数
szSign byte "-", 0; 输出负号
signflag dword 0
szNextLine byte 0ah, 0
TempResult byte 3000 dup(0)
Result byte 3000 dup(0)
carryFlag dword 0
szBigIntegerOne byte 1000 dup(?)
szBigIntegerTwo byte 1000 dup(?)

.DATA?
ResultLength dword ?
ResultIndex dword ?



.code
Update PROC uses eax edx ecx ebx ,Localnumber
    ;局部变量要在开头声明
    local @interNum:dword,@finalNum:dword,@addNum:dword,@resultNum:dword
    local @TempResultIndex:dword, @TempResultLength:dword

    ;计算TempResult的长度
    invoke strlen, offset TempResult
    mov @TempResultLength, eax

    ;TempResultIndex赋零
    mov @TempResultIndex, 0

    mov carryFlag, 0
    .while TRUE
        ;ebx为TempResult的索引
        mov ebx, @TempResultIndex

        ;edx =Localnumber + ebx，为finaleResult的索引
        mov edx,Localnumber
        add edx, ebx
        
        ;interNum = TempResult[ebx] - '0'
        movzx eax, TempResult[ebx]
        mov @interNum, eax
        .if @interNum >= '0'
            sub @interNum, '0'
        .endif
        
        ;finalNum = Result[ebx + _startNum] - '0'
        movzx eax, Result[edx]
        mov @finalNum, eax
        .if @finalNum >= '0'
            sub @finalNum, '0'
        .endif

        ;addNum = interNum + finalNum + carryFlag 
        mov eax, @interNum
        add eax, @finalNum
        add eax, carryFlag
        mov @addNum, eax
        
        ;eax / 10，商在eax， 余数在ebx
        ;草，除之前edx要清零？？？？？？
        mov eax, @addNum
        mov ebx, 10
        sub edx, edx
        div ebx

        ;ebx为TempResult的索引
        mov ebx, @TempResultIndex

        ;edx =Localnumber + ebx，为finaleResult的索引
        mov ecx,Localnumber
        add ecx, ebx

        ;赋值，商赋给carryFlag，余数赋给TempResult[TempResultIndex]
        mov carryFlag, eax
        mov Result[ecx], dl
        add Result[ecx], '0'

        ;TempResult ++，如果大于TempResultLength，结束循环
        inc @TempResultIndex
        mov eax, @TempResultLength
        .break .if @TempResultIndex > eax
    .endw

    ret
Update ENDP

;输出最终结果
OutAnswer PROC
    invoke strlen, offset Result
    dec eax
    mov ebx, eax
    
    .if eax == 0
        invoke printf, offset szOutput, 0
        ret
    .endif
    mov signflag, 0

    ;从字符串结尾搜索最高位，获取长度
    .while TRUE
        .if signflag
            invoke printf, offset szOutputNumber, Result[ebx]
        .elseif
            .if Result[ebx] != 0 && Result[ebx] != '0'
                mov signflag, 1
            .endif

            ;判断最后输出符号
            .if signflag
                .if sign == -1
                    invoke printf, offset szSign
                .endif
                invoke printf, offset szOutputNumber, Result[ebx]
            .endif
        .endif
        .break .if ebx == 0
        dec ebx
    .endw

    .if signflag == 0
        invoke printf, offset szOutput, 0
        ret
    .endif
    ret
OutAnswer ENDP

Multiplication PROC uses eax ebx
    local @bigIntegerOneIndex, @bigIntegerTwoIndex
    local @oneNum, @twoNum
    local @startOne, @startTwo

    ;正负号标志判断
    mov @startOne, 0
    movzx eax, szBigIntegerOne[0]
    .if eax == '-'
        mov @startOne, 1
        mov eax, -1
        imul sign
        mov sign, eax
    .elseif eax == '+'
        mov @startOne, 1
    .endif
    
    ;正负号标志判断
    mov @startTwo, 0
    movzx eax, szBigIntegerTwo[0]
    .if eax == '-'
        mov @startTwo, 1
        mov eax, -1
        imul sign
        mov sign, eax
    .elseif eax == '+'
        mov @startTwo, 1
    .endif


    ;赋值bigIntegerTwoIndex
    mov eax, Two_Length
    dec eax
    mov @bigIntegerTwoIndex, eax

    .while TRUE
        ;中间结果清零
        mov eax, 300 - 1
        .while TRUE
            mov TempResult[eax], 0
            .break .if eax == 0
            dec eax
        .endw

        ;给@twoNum赋值
        mov eax, @bigIntegerTwoIndex
        movzx ebx, szBigIntegerTwo[eax]
        mov @twoNum, ebx
        .if @twoNum >= '0' && @twoNum <= '9'
            sub @twoNum, '0'
        .else
            ;如果有异常字母，打印错误信息并退出
            invoke printf, offset szMsgError
            ret
        .endif

        ; invoke printf, offset szOutput, @twoNum
        ; invoke printf, offset szNextLine

        ;赋值bigIntegerOneIndex
        mov eax, One_Length
        dec eax
        mov @bigIntegerOneIndex, eax

        ;进位标志初始化为0
        mov carryFlag, 0
        .while TRUE
            ;给@oneNum赋值
            mov eax, @bigIntegerOneIndex
            movzx ebx, szBigIntegerOne[eax]
            mov @oneNum, ebx
            .if @oneNum >= '0' && @oneNum <= '9'
                sub @oneNum, '0'
            .elseif
                ;如果有异常字母，打印错误信息并退出
                invoke printf, offset szMsgError
                ret
            .endif

            
            ;得到相乘的结果
            mov eax, @twoNum
            mov ebx, @oneNum
            mul ebx
            add eax, carryFlag

            ;除以10， 商在eax， 余数在edx
            ; mov @mulNum, eax
            mov ebx, 10
            div ebx

            ;商赋给进位标志
            mov carryFlag, eax

            ;余数赋给TempResult[ebx]
            mov ebx, One_Length
            dec ebx
            sub ebx, @bigIntegerOneIndex
            mov TempResult[ebx], dl
            add TempResult[ebx], '0'

            mov eax, @startOne
            .break .if @bigIntegerOneIndex == eax
            dec @bigIntegerOneIndex
        .endw


        ;最后的进位处理
        ;===========================
        mov eax, carryFlag

        ;除以10， 商在eax， 余数在edx
        ; mov @mulNum, eax
        mov ebx, 10
        sub edx, edx
        div ebx

        ;商赋给进位标志
        mov carryFlag, eax

        ;余数赋给TempResult[ebx]
        mov ebx, One_Length
        sub ebx, @startOne
        mov TempResult[ebx], dl
        add TempResult[ebx], '0'
        ;===========================

        ; invoke printf, offset szOutputString, offset TempResult
        
        ;计算Result = Result + TempResult 
        mov eax, Two_Length
        dec eax
        sub eax, @bigIntegerTwoIndex
        invoke Update, eax

        mov eax, @startTwo
        .break .if @bigIntegerTwoIndex == eax
        dec @bigIntegerTwoIndex
    .endw

    ;输出结果
    invoke OutAnswer
    ret
Multiplication ENDP

start:
    ;输入并控制第一个字符串的长度
    invoke printf, offset szMsgprint1
    invoke scanf, offset Msgscanf, offset szBigIntegerOne
    invoke strlen, offset szBigIntegerOne
    mov One_Length, eax
    .if One_Length > 1000
        invoke printf, offset szMsgError
        ret
    .endif

    ;输入并控制第二个字符串的长度
    invoke printf, offset szMsgprint2
    invoke scanf, offset Msgscanf, offset szBigIntegerTwo
    invoke strlen, offset szBigIntegerTwo
    mov Two_Length, eax
    .if Two_Length > 1000
        invoke printf, offset szMsgError
        ret
    .endif

     ; 输出结果运算结果
    invoke printf, offset  szMsgprint3, signflag
    invoke Multiplication
    
    ret
end start